package com.hori.lxjsdk.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSON;
import com.hori.lxjsdk.enums.ResponseCode;
import com.hori.lxjsdk.message.ServletMessageCommon;
import com.hori.lxjsdk.model.PlatFormJoinArea;
import com.hori.lxjsdk.redis.RedisCacheService;
import com.hori.lxjsdk.service.PlatFormJoinAreaService;
import com.hori.lxjsdk.service.PlatFormJoinService;
import com.hori.lxjsdk.service.SyncDataService;
import com.hori.lxjsdk.utils.CollectionUtil;
import com.hori.lxjsdk.web.vo.ResponseMsg;
import com.hori.lxjsdk.web.vo.SyncDataVo;
import com.hori.lxjsdk.web.vo.PlatFormUserVo;

import net.sf.json.JSONObject;

@SuppressWarnings("unchecked")
public class SyncDataController extends BaseApiRequestHelper{
	@Resource
	private PlatFormJoinService platFormJoinService;
	@Resource
	private PlatFormJoinAreaService platFormJoinAreaService;
	@Resource
	private SyncDataService syncDataService;
	@Resource
	private RedisCacheService redisCacheService;
	/**
	 * 数据同步接口(需验证token)
	 * 地址 : /lxjsdkApi/syncData
	 * 参数: 
	 *  "areaCode":"小区机构编号",
	 *	"operateType":"操作类型：1、新增  2、修改  3、删除",
	 *	"list":[{
	 *		"userId":"123",
	 *		"address":"东方小区1号楼1单元0101房",
	 *		"userName":"张三",
	 *		"mobile":"18719345678"
     *   }]
	 * @param request
	 * @param response
	 */
	@RequestMapping("/syncData")
	public void syncDataAuthentication(HttpServletRequest request,HttpServletResponse response){
		
		processValidRequest(request, response, new RequetstHandler() {
			
			@Override
			public ResponseMsg processHandler(HttpServletRequest request, HttpServletResponse response, JSONObject paramsHeader,
					JSONObject paramsBody) {
				
				String token=paramsHeader.getString("token");
				//根据token获取平台账号
				String account=ServletMessageCommon.getAccountToken(token);
				
				//PlatFormJoin platFormJoin = platFormJoinService.findByAccount(account);
				
				//小区机构编号
				String areaCode=paramsBody.getString("areaCode");
				
				//对小区机构编号进行校验
				PlatFormJoinArea platFormJoinArea = platFormJoinAreaService.findByAccountAndAreaCode(account, areaCode);
				
				if(platFormJoinArea==null){
					return ResponseMsg.buildErrorResp(ResponseCode.NO_PERMISSION,"无权限访问未与平台账号关联的小区");
				}
				
				SyncDataVo syncDataVo=jsonObjectToBean(paramsBody, SyncDataVo.class);
				
				syncDataVo.setPlatFormAccount(account);
				
				//操作类型：1、新增  2、修改  3、删除
				Integer operateType=syncDataVo.getOperateType();
				
				List<PlatFormUserVo> users = syncDataVo.getList();
				
				if(operateType==null||users==null||users.size()==0||operateType<1||operateType>3){
					return ResponseMsg.buildErrorResp(ResponseCode.MESSAGE_FORMAT_ERROR);
				}
				//存放所有没匹配到地址的用户id
				List<String> allNoMatchUserIds=new ArrayList<String>();
				//存放所有已经同步过数据的用户id
				List<String> allHasSaveUserIds=new ArrayList<String>();
				//存放此次同步任务需同步的用户
				Map<String,String> waitSyncDataUserMap=new HashMap<String,String>(users.size());
				//已经同步过数据的用户map,key为用户id
				Map<String,String> hasSaveUserMap=null;
				
				//判断是否是新增操作,是新增操作，则需要将已经保存过的数据过滤掉
				if(operateType==1){
					//从redis中获取已经同步过数据的用户
					String hasSaveUsersJson=redisCacheService.get(RedisCacheService.KEY_PREFIX+areaCode);
					
					if(!StringUtils.isEmpty(hasSaveUsersJson)){
						//已经同步过数据的用户map,key为用户id
						hasSaveUserMap=jsonStrToBean(hasSaveUsersJson,Map.class);
						
						//存放此次同步任务需同步的用户
						List<PlatFormUserVo> waitSyncDataUsers=new ArrayList<PlatFormUserVo>();

						for (PlatFormUserVo platFormUserVo : users) {

							//判断用户是否已经同步过数据
							if(hasSaveUserMap.containsKey(platFormUserVo.getUserId())){
								//已经同步过数据的用户不再处理
								allHasSaveUserIds.add(platFormUserVo.getUserId());
							}else{
								//未同步过数据的用户
								waitSyncDataUserMap.put(platFormUserVo.getUserId(), "");
								waitSyncDataUsers.add(platFormUserVo);
							}
						}

						if(waitSyncDataUsers.size()==0){
							return buildResp(allNoMatchUserIds,allHasSaveUserIds); 
						}

						//只同步还没同步过数据的用户
						syncDataVo.setList(waitSyncDataUsers);
						
					}else{

						for (PlatFormUserVo platFormUserVo : users) {
							waitSyncDataUserMap.put(platFormUserVo.getUserId(), "");
						}
					}
					
				}else{
					//删除和更新操作不需过滤数据
					for (PlatFormUserVo platFormUserVo : users) {
						waitSyncDataUserMap.put(platFormUserVo.getUserId(), "");
					}
					
					//如果是删除操作需要把缓存数据取出，当删除成功后要把删除的用户从缓存里清除
					if(operateType==3){
						//从redis中获取已经同步过数据的用户
						String hasSaveUsersJson=redisCacheService.get(RedisCacheService.KEY_PREFIX+areaCode);
						
						if(!StringUtils.isEmpty(hasSaveUsersJson)){
							//已经同步过数据的用户map,key为用户id
							hasSaveUserMap=jsonStrToBean(hasSaveUsersJson,Map.class);
						}
					}
				}
				
				
				if(hasSaveUserMap==null){
					hasSaveUserMap=new HashMap<String,String>(users.size());
				}
				
				int maxProcessCount=500;
				/*
				 * 判断用户数据是否大于500,如果大于500则分批处理
				 */
				if(users.size()<maxProcessCount){
					List<String> noMatchUserIds=syncDataService.syncData(syncDataVo);
					allNoMatchUserIds.addAll(noMatchUserIds);
					
					//将没匹配到地址的用户id，从waitSyncDataUserMap里移除
					for (String userId : allNoMatchUserIds) {
						waitSyncDataUserMap.remove(userId);
					}
					if(operateType==1){
						//新增操作需要把新增的用户更新到缓存里
						hasSaveUserMap.putAll(waitSyncDataUserMap);
						
						redisCacheService.set(getSyncDataCacheKey(areaCode),JSON.toJSONString(hasSaveUserMap));
					}
					
					if(operateType==3){
						
						//删除操作需要把删除的用户从缓存里清除
						
						Set<String> userIds = waitSyncDataUserMap.keySet();
						
						for (String userId : userIds) {
							hasSaveUserMap.remove(userId);
						}
						
						redisCacheService.set(getSyncDataCacheKey(areaCode),JSON.toJSONString(hasSaveUserMap));
					}
				
					
					return buildResp(allNoMatchUserIds,allHasSaveUserIds);
				}else{
					//总页数(将用户数据分页处理，每500条为1页)
					int totalpage=(int) Math.ceil(users.size()*1.0/maxProcessCount);
					
					for (int i = 1; i <= totalpage; i++) {
						
						//分页获取用户数据
						List<PlatFormUserVo> subList = CollectionUtil.subList(users, i, maxProcessCount);
						
						syncDataVo.setList(subList);
						
						//分批同步数据
						List<String> noMatchUserIds=syncDataService.syncData(syncDataVo);
						
						if(noMatchUserIds.size()>0){
							allNoMatchUserIds.addAll(noMatchUserIds);
						}
					}
					
					//将没匹配到地址的用户id，从waitSyncDataUserMap里移除
					for (String userId : allNoMatchUserIds) {
						waitSyncDataUserMap.remove(userId);
					}

					if(operateType==1){
						//新增操作需要把新增的用户更新到缓存里
						hasSaveUserMap.putAll(waitSyncDataUserMap);
						
						redisCacheService.set(getSyncDataCacheKey(areaCode),JSON.toJSONString(hasSaveUserMap));
					}
					
					if(operateType==3){
						
						//删除操作需要把删除的用户从缓存里清除
						
						Set<String> userIds = waitSyncDataUserMap.keySet();
						
						for (String userId : userIds) {
							hasSaveUserMap.remove(userId);
						}
						
						redisCacheService.set(getSyncDataCacheKey(areaCode),JSON.toJSONString(hasSaveUserMap));
					}

					return buildResp(allNoMatchUserIds,allHasSaveUserIds);
				}
			}
		});
	}
	
	
	private String getSyncDataCacheKey(String areaCode){
		return RedisCacheService.KEY_PREFIX+"syncData_"+areaCode;
	}
	
	
	private ResponseMsg buildResp(List<String> errorUserIds,List<String> hasSaveUserIds){
		
		List<Map<String,String>> errorList=new ArrayList<Map<String,String>>();

		if(errorUserIds!=null){
			for (String userId : errorUserIds) {
				
				Map<String,String> map=new HashMap<String,String>(2);
				
				map.put("userId", userId);
				map.put("errorMsg", "地址不匹配");
				
				errorList.add(map);
			}
		}
		
		if(hasSaveUserIds!=null){
			for (String userId : hasSaveUserIds) {
				
				Map<String,String> map=new HashMap<String,String>(2);
				
				map.put("userId", userId);
				map.put("errorMsg", "已经同步过数据,如须修改请调用修改接口");
				
				errorList.add(map);
			}
		}
		
		ResponseMsg resp = ResponseMsg.buildSuccessResp();
		
		if(errorList.size()>0){
			resp.put("errorList", errorList);
		}
		
		return resp;
	};
}
