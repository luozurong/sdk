package com.hori.lxjsdk.controller;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hori.lxjsdk.enums.ResponseCode;
import com.hori.lxjsdk.enums.ServletRspErrorCode;
import com.hori.lxjsdk.model.Application;
import com.hori.lxjsdk.model.PlatFormJoin;
import com.hori.lxjsdk.model.PlatFormUser;
import com.hori.lxjsdk.service.ApplicationService;
import com.hori.lxjsdk.service.PlatFormJoinService;
import com.hori.lxjsdk.service.PlatFormUserService;
import com.hori.lxjsdk.util.UUIDString;
import com.hori.lxjsdk.web.vo.ResponseMsg;
import com.hori.lxjsdk.webservice.ILXJSDKOauthService;
import com.jlit.hibernate.UUIDGeneratorUtil;
import com.jlit.memcached.session.SessionService;

import net.sf.json.JSONObject;

@Controller
public class AuthenticationController extends BaseApiRequestHelper{
	
	@Resource
	private PlatFormJoinService platFormJoinService;
	@Resource
	private ApplicationService applicationService;
	@Resource
	private PlatFormUserService platFormUserService;
	@Resource
	private ILXJSDKOauthService iLXJSDKOauthService;
	
	/**
	 * 数据同步鉴权接口(不需验证token)
	 * 地址 : /lxjsdkApi/syncDataAuthentication
	 * 参数: 
	 * {
	 * 		header:{token:"",time_stamp:""}
	 * 
	 * 	  	body:{
	 * 			"account":"第三方平台接入账号",
	 *			"password":"账号密码"
	 * 		}
	 * } 
	 * @param request
	 * @param response
	 */
	@RequestMapping("/syncDataAuthentication")
	public void syncDataAuthentication(HttpServletRequest request,HttpServletResponse response){
		processNoValidRequest(request, response, new RequetstHandler() {

			@Override
			public ResponseMsg processHandler(HttpServletRequest request, HttpServletResponse response,
					JSONObject paramsHeader, JSONObject paramsBody) {
				
				String account=paramsBody.getString("account");
				String password=paramsBody.getString("password");
				
				PlatFormJoin platFormAccount = platFormJoinService.findByAccountAndPass(account, password);
				
				if(platFormAccount==null){
					return ResponseMsg.buildErrorResp(ResponseCode.ACCOUNT_OR_PASSWORD_ERROR);
				}
				
				String token=UUIDGeneratorUtil.generateUUID();
				
				SessionService.getInstance().save(token, account);
				
				return ResponseMsg.buildSuccessResp().put("token", token);
			}
		});
	}
	
	
	/**
	 * 联享家SDK鉴权接口(不需验证token)
	 * 地址 : /lxjsdkApi/authentication
	 * 参数: 
	 * {
	 * 		header:{token:"",time_stamp:""}
	 * 
	 * 	  	body:{
	 * 			"appKey":"第三方注册后返回的appKey",
	 *			"sdkPackage":"SDK包名",
	 *          "accountInfo":{
     *				"userId":"用户ID",
	 *				"enUserId":"加密后的用户ID,加密方式< MD5(appKey+userId）>",
     * 				"username":"用户姓名，没有则填写为空字符串",
     * 				"userPhone":"用户手机号，没有则填写为空字符串"
	 *			 },
	 * 		}
	 * } 
	 */
	@RequestMapping("/authentication")
	public void lxjSDKOauth(HttpServletRequest request,HttpServletResponse response){
		
		processNoValidRequest(request, response, new RequetstHandler() {

			@Override
			public ResponseMsg processHandler(HttpServletRequest request, HttpServletResponse response,
					JSONObject paramsHeader, JSONObject paramsBody) {
				
				
				ResponseMsg responseMsg = ResponseMsg.buildEmptyResp();
				responseMsg.setResponseCode(ResponseCode.RSP_SUCCESS);
				responseMsg.put("token","0");
				responseMsg.put("status", "0");
				
				String appKey = paramsBody.getString("appKey");
				String sdkPackage = paramsBody.getString("sdkPackage");
				
				String userName = "";
				String userPhone = "";
				
				JSONObject accountInfo = JSONObject.fromObject(paramsBody.getString("accountInfo"));
				
				String userId = accountInfo.getString("userId");
				String enUserId = accountInfo.getString("enUserId");
				
				if(accountInfo.containsKey("userName")){
					userName = accountInfo.getString("userName");
				}
				if(accountInfo.containsKey("userPhone")){
					userPhone = accountInfo.getString("userPhone");
				}
				Application application = applicationService.getByAppKey(appKey);
				
				boolean validSDKPackage = applicationService.validSDKPackage(application.getAppPackage(),sdkPackage);
				if(!validSDKPackage){//sdk包名不正确
					responseMsg.setResponseCode(ResponseCode.SDK_PACKAGE_UN_VALID);

					return responseMsg;		
				}		
				
				boolean isExistAppKey = applicationService.validAppKey(application);//验证appKey是否存在
				if(!isExistAppKey){//没有指定appKey
					responseMsg.setResponseCode(ResponseCode.SDK_PACKAGE_UN_VALID);
					return responseMsg;	
				}
				
				//验证userId是否存在
				boolean isExistUserId = applicationService.validUserId(application.getCreateAccount(),appKey,userId);
				
				if(!isExistUserId){//不存在userId
					responseMsg.setResponseCode(ResponseCode.USER_ID_NOT_EXIST);
					return responseMsg;	
				}
				
				//查询已创建的授权账号，没有表示第一次接入联享家平台，生成新账号
				
				String userAccount =platFormUserService.queryAppOauthAccount(application.getCreateAccount(),userId);
				 
				if(userAccount==null){
					 userAccount = UUIDString.getUUIDString();
				}
				//判断是否存在未关联的住房
				List<PlatFormUser> users = queryUnOauth(application.getCreateAccount(),appKey,userId,enUserId);
				if(users.size()>0){//存在未开通房间，关联住房
					 	for(PlatFormUser user:users){
					 		String code = iLXJSDKOauthService.bindRoom(user.getUserId(),userAccount, user.getHouseholdSerial());
					 		if("0".equals(code)){
					 			user.setStatus(1);
					 			user.setAppOauthAccount(userAccount);
					 			platFormUserService.update(user);
					 		}
					 	}
				}
				
				String token = createToken(enUserId);//生成或者获取token
				responseMsg.put("token",token);
				responseMsg.put("status", "1");		
				
				return responseMsg;	
			}
		});
		
		
	}
	
	/**
	 * 
	 * @param enUserId  MD5(appKey+userId)  加密后的userId
	 * @return  token
	 */
	private String createToken(String enUserId) {
		//生成token
		String token = UUIDString.getUUIDString();
		//把令牌做为key，账号为value
		SessionService.getInstance().save(token, enUserId);
		return token;
	}
	

	/**
	 * 判断是否存在未关联的住房
	 * @param appKey
	 * @param userId
	 * @param enUserId
	 * @return  true 存在未关联住房
	 */
	private List<PlatFormUser> queryUnOauth(String platformAccount,String appKey, String userId, String enUserId) {
		List<PlatFormUser> users = platFormUserService.queryPlatFormUsers(platformAccount,userId);
		Iterator<PlatFormUser> iterator = users.iterator();
		while(iterator.hasNext()){
			if(0!=iterator.next().getStatus()){//移除不是未绑定状态的数据
				iterator.remove();
			}			
		}
		return users;
	}
	
}
